* Customizing doom emacs
Just some basic configuration

** Configuring doom
Basic settings for doom

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src elisp
(setq user-full-name "Alexander de Jong"
      user-mail-address "mrdejong89@gmail.com")

(setq doom-leader-key "SPC"
      doom-localleader-key ",")

(setq doom-theme 'doom-nord-light)
(setq org-directory "~/org/")

(setq display-line-numbers-type 'relative)
#+end_src


** Configuring packages
I love both ranger and neotree, let's configure them here

#+begin_src elisp
(map! :leader
      :desc "Open ranger"
      :nv "f r" #'ranger)

(map! :leader
      :desc "Open neotree"
      :nv "f n" #'+neotree/open)
#+end_src


** LSP Config
Configuration for lsp

#+begin_src elisp
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection '("intelephens" "--stdio"))
                    :major-modes '(php-mode)
                    :remote? t
                    :priority -1
                    :notification-handlers (ht ("indexingStarted" #'ignore)
                                               ("indexingEnded" #'ignore))
                    :initialization-options (lambda ()
                                              (list :storagePath lsp-intelephense-storage-path
                                                    :licenceKey lsp-intelephense-licence-key
                                                    :clearCache lsp-intelephense-clear-cache))
                    :completion-in-comments? t
                    :server-id 'iph-remote)))
#+end_src


** Utility functions
Some utility functions for keybinds etc.

#+begin_src elisp
(defun save-exit ()
  (interactive)
  (evil-normal-state)
  (save-buffer))

(defun move-one-char ()
  (interactive)
  (evil-normal-state)
  (execute-kbd-macro (read-kbd-macro "la")))

(defun move-end-line ()
  (interactive)
  (evil-normal-state)
  (execute-kbd-macro (read-kbd-macro "$a")))

(defun move-end-line-semi ()
  (interactive)
  (evil-normal-state)
  (execute-kbd-macro (read-kbd-macro "$a;"))
  (evil-normal-state))

(defun paste ()
  (interactive)
  (evil-normal-state)
  (execute-kbd-macro (read-kbd-macro "pa")))
#+end_src

** Keychord

#+begin_src elisp
(require 'key-chord)
(require 'key-seq)

(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.2)

(key-seq-define evil-insert-state-map "jw" 'save-exit)
(key-seq-define evil-insert-state-map "jl" 'move-one-char)
(key-seq-define evil-insert-state-map "js" 'move-end-line)
(key-seq-define evil-insert-state-map "j;" 'move-end-line-semi)
(key-seq-define evil-insert-state-map "jp" 'paste)

#+end_src

** Misc
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

(after! company
  (setq company-idle-delay 0.0
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))

#+end_src
